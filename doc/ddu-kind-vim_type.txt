*ddu-kind-vim_type.txt*	Vim type kind for ddu.vim

Author: flow6852
License: MIT license

CONTENTS				*ddu-kind-vim_type-contents*

Introduction		|ddu-kind-vim_type-introduction|
Install			|ddu-kind-vim_type-install|
Examples		|ddu-kind-vim_type-examples|
Actions			|ddu-kind-vim_type-actions|
ActionParams		|ddu-kind-vim_type-actionparams|


==============================================================================
INTRODUCTION				*ddu-kind-vim_type-introduction*

This kind implements vim operations


==============================================================================
INSTALL					*ddu-kind-vim_type-install*

Please install both "ddu.vim" and "denops.vim".

https://github.com/Shougo/ddu.vim
https://github.com/vim-denops/denops.vim


==============================================================================
EXAMPLES				*ddu-kind-vim_type-examples*

>

    cmap <silent> <C-h> <Cmd>call DduKindVim_typeSetcmdline()<CR>

    function DduKindVim_typeSetcmdline()
        let getcmdline = getcmdline()
        call feedkeys("\<Esc>", 't')
        call ddu#start({'name': 'vim_variable', 'sources': [
            \ {'name': 'vim_variable', 'params': {'bufnr': bufnr('%')}},
            \ {'name': 'vim_option', 'params': {'bufnr': bufnr('%')}},
            \ {'name': 'vim_function', 'params': {'bufnr': bufnr('%')}},
            \ {'name': 'vim_command', 'params': {'bufnr': bufnr('%')}},
            \ {'name': 'vim_event', 'params': {'bufnr': bufnr('%')}}],
            \ 'actionParams': {'getcmdline': getcmdline}})
    endfunction

    " keymapping
    augroup DduKeyMap
      au!
      autocmd FileType ddu-ff call s:ddu_my_settings()
    augroup End
    
    function! s:ddu_my_settings() abort
      " file
      nnoremap <buffer><silent> ;p
        \ <Cmd>call ddu#ui#do_action('preview')<CR>
    
      nnoremap <buffer><silent> ;h
        \ <Cmd>call DduHelpChain('help')<CR>
    
      nnoremap <buffer><silent> <Esc>
        \ <Cmd>call ddu#ui#do_action('quit')<CR>
    
      nnoremap <buffer><silent> ;y
        \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'yank'})<CR>
    
      nnoremap <buffer><silent> <C-c>
        \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'setcmdline'})<CR>
    endfunction

    function! DduHelpChain(arg)
        let item = ddu#ui#get_item()
        call ddu#ui#do_action('quit')
        call ddu#start({'name': a:arg, 'input': get(item, 'word')})
    endfunction

    call ddu#custom#patch_local('help', {'ui': 'ff', 'sourceOptions': {'_': {'matchers': ['matcher_substring']}} 'sources': [{'name': 'help'}]}))


>
==============================================================================
ACTIONS					*ddu-kind-vim_type-actions*

					*ddu-kind-vim_type-action-yank*
yank
		Yank the vim_type.
    
					*ddu-kind-vim_type-actio-getcmdline*
setcmdline
		Setcmdline the vim_type.
		Note: Only Action in cmdline.

==============================================================================

ACTION PARAMS				*ddu-kind-vim_type-actionparams*

				        *ddu-kind-vim_type-actionparam-getcmdline*
getcmdline	(string)
		When use setcmdline, append string in front of item.

		Default: ""

				        *ddu-kind-vim_type-actionparam-getcmdpos*
getcmdpos	(number)
		When use setcmdline, append string in front of item on
		position.

		Default: 1

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
