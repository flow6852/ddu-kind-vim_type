*ddu-kind-vim_type.txt*	Vim type kind for ddu.vim

Author: flow6852
License: MIT license

CONTENTS				*ddu-kind-vim_type-contents*

Introduction		|ddu-kind-vim_type-introduction|
Install			|ddu-kind-vim_type-install|
Examples		|ddu-kind-vim_type-examples|
Actions			|ddu-kind-vim_type-actions|
ActionParams		|ddu-kind-vim_type-actionparams|


==============================================================================
INTRODUCTION				*ddu-kind-vim_type-introduction*

This kind implements vim operations


==============================================================================
INSTALL					*ddu-kind-vim_type-install*

Please install both "ddu.vim" and "denops.vim".

https://github.com/Shougo/ddu.vim
https://github.com/vim-denops/denops.vim


==============================================================================
EXAMPLES				*ddu-kind-vim_type-examples*

using above

https://github.com/Shougo/ddu-ui-ff
https://github.com/matsui54/ddu-source-help
https://github.com/flow6852/ddu-source-vim_variable
https://github.com/flow6852/ddu-source-vim_option
https://github.com/flow6852/ddu-source-vim_function
https://github.com/flow6852/ddu-source-vim_command
https://github.com/flow6852/ddu-source-vim_event
>
    call ddu#custom#patch_local('vim_type', {'ui': 'ff', 
	    \ 'sources': [
		\ {'name': 'vim_variable', 'params': {'bufnr': bufnr('%')}},
            	\ {'name': 'vim_option', 'params': {'bufnr': bufnr('%')}},
            	\ {'name': 'vim_function', 'params': {'bufnr': bufnr('%')}},
            	\ {'name': 'vim_command', 'params': {'bufnr': bufnr('%')}},
            	\ {'name': 'vim_event', 'params': {'bufnr': bufnr('%')}}]})

    nmap <silent> ;h <Cmd> call ddu#start({'name': 'vim_type'})<CR>
    cmap <silent> <C-h> <Cmd>call DduKindVim_typeSetcmdline()<CR>

    " for in commandline
    function DduKindVim_typeSetcmdline()
        let getcmdline = getcmdline()
	let getcmdpos = getcmdpos()
        call feedkeys("\<Esc>", 't')
        call ddu#start({'name': 'vim_type', 
            \ 'actionParams': {'getcmdline': getcmdline, 'getcmdpos': getcmdpos}})
    endfunction

    augroup DduKeyMap
      au!
      autocmd FileType ddu-ff call s:ddu_my_settings()
      autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
    augroup End
    
    function! s:ddu_my_settings() abort
	" global 
	
	nnoremap <buffer><silent> <Esc>
	  \ <Cmd>call ddu#ui#do_action('quit')<CR>
	
	nnoremap <buffer><silent> p
	  \ <Cmd>call ddu#ui#do_action('preview')<CR>
	
	nnoremap <buffer><silent> v
	  \ <Cmd>call ddu#ui#do_action('getItem')<CR>

	if b:ddu_ui_name == "vim_type"
    	  " file
	    nnoremap <buffer><silent> ;h
	      \ <Cmd>call DduChain('help')<CR>
	    
	    nnoremap <buffer><silent> <C-c>
	      \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'setcmdline'})<CR>
	    
	    nnoremap <buffer><silent> y
	      \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'yank'})<CR>
	elseif b:ddu_ui_name == "help"
	      nnoremap <buffer><silent> ;h
	        \ <Cmd>call DduChain('vim_type')<CR>
	endif
    endfunction

    function! s:ddu_filter_my_settings() abort
      inoremap <buffer> <CR>
            \ <Esc><Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
      inoremap <buffer> <ESC>
            \ <Esc><Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
      nnoremap <buffer> <CR>
            \ <Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
      nnoremap <buffer> <ESC>
            \ <Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
    endfunction

    function! DduChain(arg)
        let l:item = ddu#ui#get_item()
        call ddu#ui#sync_action('quit')
        let l:word = get(l:item, 'word')
        if get(l:item, '__sourceName') == 'help' && match(l:word, ":") == 0
            let l:word = l:word[1:len(l:word)]
        endif
        call ddu#start({'name': a:arg, 'input': l:word})
    endfunction

==============================================================================
ACTIONS					*ddu-kind-vim_type-actions*

					*ddu-kind-vim_type-action-yank*
yank
		Yank word.

					*ddu-kind-vim_type-actio-getcmdline*
setcmdline
		input word in command line.

					*ddu-kind-vim_type-action-append*
append
		Put the words like |p|.

					*ddu-kind-vim_type-action-insert*
insert
		Put the words like |P|.

==============================================================================

ACTION PARAMS				*ddu-kind-vim_type-actionparams*

				        *ddu-kind-vim_type-actionparam-getcmdline*
getcmdline	(string)
		When use setcmdline, append string in front of item.

		Default: ""

				        *ddu-kind-vim_type-actionparam-getcmdpos*
getcmdpos	(number)
		When use setcmdline, append string in front of item on
		position.

		Default: 1

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
